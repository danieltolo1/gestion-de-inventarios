"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = (0, tslib_1.__importStar)(require("tslib"));
const crudResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = (0, tslib_1.__importStar)(require("./resolvers/crud/args.index"));
const actionResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = (0, tslib_1.__importStar)(require("./resolvers/relations/resolvers.index"));
const models = (0, tslib_1.__importStar)(require("./models"));
const outputTypes = (0, tslib_1.__importStar)(require("./resolvers/outputs"));
const inputTypes = (0, tslib_1.__importStar)(require("./resolvers/inputs"));
const crudResolversMap = {
    Product: crudResolvers.ProductCrudResolver,
    Product_Type: crudResolvers.Product_TypeCrudResolver,
    State: crudResolvers.StateCrudResolver,
    Computer: crudResolvers.ComputerCrudResolver,
    SoftwareComputer: crudResolvers.SoftwareComputerCrudResolver,
    Program: crudResolvers.ProgramCrudResolver,
    PartComputer: crudResolvers.PartComputerCrudResolver,
    Location: crudResolvers.LocationCrudResolver,
    Maintenance: crudResolvers.MaintenanceCrudResolver,
    Account: crudResolvers.AccountCrudResolver,
    Session: crudResolvers.SessionCrudResolver,
    VerificationToken: crudResolvers.VerificationTokenCrudResolver,
    User: crudResolvers.UserCrudResolver
};
const actionResolversMap = {
    Product: {
        product: actionResolvers.FindUniqueProductResolver,
        findFirstProduct: actionResolvers.FindFirstProductResolver,
        products: actionResolvers.FindManyProductResolver,
        createProduct: actionResolvers.CreateProductResolver,
        createManyProduct: actionResolvers.CreateManyProductResolver,
        deleteProduct: actionResolvers.DeleteProductResolver,
        updateProduct: actionResolvers.UpdateProductResolver,
        deleteManyProduct: actionResolvers.DeleteManyProductResolver,
        updateManyProduct: actionResolvers.UpdateManyProductResolver,
        upsertProduct: actionResolvers.UpsertProductResolver,
        aggregateProduct: actionResolvers.AggregateProductResolver,
        groupByProduct: actionResolvers.GroupByProductResolver
    },
    Product_Type: {
        product_Type: actionResolvers.FindUniqueProduct_TypeResolver,
        findFirstProduct_Type: actionResolvers.FindFirstProduct_TypeResolver,
        product_Types: actionResolvers.FindManyProduct_TypeResolver,
        createProduct_Type: actionResolvers.CreateProduct_TypeResolver,
        createManyProduct_Type: actionResolvers.CreateManyProduct_TypeResolver,
        deleteProduct_Type: actionResolvers.DeleteProduct_TypeResolver,
        updateProduct_Type: actionResolvers.UpdateProduct_TypeResolver,
        deleteManyProduct_Type: actionResolvers.DeleteManyProduct_TypeResolver,
        updateManyProduct_Type: actionResolvers.UpdateManyProduct_TypeResolver,
        upsertProduct_Type: actionResolvers.UpsertProduct_TypeResolver,
        aggregateProduct_Type: actionResolvers.AggregateProduct_TypeResolver,
        groupByProduct_Type: actionResolvers.GroupByProduct_TypeResolver
    },
    State: {
        state: actionResolvers.FindUniqueStateResolver,
        findFirstState: actionResolvers.FindFirstStateResolver,
        states: actionResolvers.FindManyStateResolver,
        createState: actionResolvers.CreateStateResolver,
        createManyState: actionResolvers.CreateManyStateResolver,
        deleteState: actionResolvers.DeleteStateResolver,
        updateState: actionResolvers.UpdateStateResolver,
        deleteManyState: actionResolvers.DeleteManyStateResolver,
        updateManyState: actionResolvers.UpdateManyStateResolver,
        upsertState: actionResolvers.UpsertStateResolver,
        aggregateState: actionResolvers.AggregateStateResolver,
        groupByState: actionResolvers.GroupByStateResolver
    },
    Computer: {
        computer: actionResolvers.FindUniqueComputerResolver,
        findFirstComputer: actionResolvers.FindFirstComputerResolver,
        computers: actionResolvers.FindManyComputerResolver,
        createComputer: actionResolvers.CreateComputerResolver,
        createManyComputer: actionResolvers.CreateManyComputerResolver,
        deleteComputer: actionResolvers.DeleteComputerResolver,
        updateComputer: actionResolvers.UpdateComputerResolver,
        deleteManyComputer: actionResolvers.DeleteManyComputerResolver,
        updateManyComputer: actionResolvers.UpdateManyComputerResolver,
        upsertComputer: actionResolvers.UpsertComputerResolver,
        aggregateComputer: actionResolvers.AggregateComputerResolver,
        groupByComputer: actionResolvers.GroupByComputerResolver
    },
    SoftwareComputer: {
        softwareComputer: actionResolvers.FindUniqueSoftwareComputerResolver,
        findFirstSoftwareComputer: actionResolvers.FindFirstSoftwareComputerResolver,
        softwareComputers: actionResolvers.FindManySoftwareComputerResolver,
        createSoftwareComputer: actionResolvers.CreateSoftwareComputerResolver,
        createManySoftwareComputer: actionResolvers.CreateManySoftwareComputerResolver,
        deleteSoftwareComputer: actionResolvers.DeleteSoftwareComputerResolver,
        updateSoftwareComputer: actionResolvers.UpdateSoftwareComputerResolver,
        deleteManySoftwareComputer: actionResolvers.DeleteManySoftwareComputerResolver,
        updateManySoftwareComputer: actionResolvers.UpdateManySoftwareComputerResolver,
        upsertSoftwareComputer: actionResolvers.UpsertSoftwareComputerResolver,
        aggregateSoftwareComputer: actionResolvers.AggregateSoftwareComputerResolver,
        groupBySoftwareComputer: actionResolvers.GroupBySoftwareComputerResolver
    },
    Program: {
        program: actionResolvers.FindUniqueProgramResolver,
        findFirstProgram: actionResolvers.FindFirstProgramResolver,
        programs: actionResolvers.FindManyProgramResolver,
        createProgram: actionResolvers.CreateProgramResolver,
        createManyProgram: actionResolvers.CreateManyProgramResolver,
        deleteProgram: actionResolvers.DeleteProgramResolver,
        updateProgram: actionResolvers.UpdateProgramResolver,
        deleteManyProgram: actionResolvers.DeleteManyProgramResolver,
        updateManyProgram: actionResolvers.UpdateManyProgramResolver,
        upsertProgram: actionResolvers.UpsertProgramResolver,
        aggregateProgram: actionResolvers.AggregateProgramResolver,
        groupByProgram: actionResolvers.GroupByProgramResolver
    },
    PartComputer: {
        partComputer: actionResolvers.FindUniquePartComputerResolver,
        findFirstPartComputer: actionResolvers.FindFirstPartComputerResolver,
        partComputers: actionResolvers.FindManyPartComputerResolver,
        createPartComputer: actionResolvers.CreatePartComputerResolver,
        createManyPartComputer: actionResolvers.CreateManyPartComputerResolver,
        deletePartComputer: actionResolvers.DeletePartComputerResolver,
        updatePartComputer: actionResolvers.UpdatePartComputerResolver,
        deleteManyPartComputer: actionResolvers.DeleteManyPartComputerResolver,
        updateManyPartComputer: actionResolvers.UpdateManyPartComputerResolver,
        upsertPartComputer: actionResolvers.UpsertPartComputerResolver,
        aggregatePartComputer: actionResolvers.AggregatePartComputerResolver,
        groupByPartComputer: actionResolvers.GroupByPartComputerResolver
    },
    Location: {
        location: actionResolvers.FindUniqueLocationResolver,
        findFirstLocation: actionResolvers.FindFirstLocationResolver,
        locations: actionResolvers.FindManyLocationResolver,
        createLocation: actionResolvers.CreateLocationResolver,
        createManyLocation: actionResolvers.CreateManyLocationResolver,
        deleteLocation: actionResolvers.DeleteLocationResolver,
        updateLocation: actionResolvers.UpdateLocationResolver,
        deleteManyLocation: actionResolvers.DeleteManyLocationResolver,
        updateManyLocation: actionResolvers.UpdateManyLocationResolver,
        upsertLocation: actionResolvers.UpsertLocationResolver,
        aggregateLocation: actionResolvers.AggregateLocationResolver,
        groupByLocation: actionResolvers.GroupByLocationResolver
    },
    Maintenance: {
        maintenance: actionResolvers.FindUniqueMaintenanceResolver,
        findFirstMaintenance: actionResolvers.FindFirstMaintenanceResolver,
        maintenances: actionResolvers.FindManyMaintenanceResolver,
        createMaintenance: actionResolvers.CreateMaintenanceResolver,
        createManyMaintenance: actionResolvers.CreateManyMaintenanceResolver,
        deleteMaintenance: actionResolvers.DeleteMaintenanceResolver,
        updateMaintenance: actionResolvers.UpdateMaintenanceResolver,
        deleteManyMaintenance: actionResolvers.DeleteManyMaintenanceResolver,
        updateManyMaintenance: actionResolvers.UpdateManyMaintenanceResolver,
        upsertMaintenance: actionResolvers.UpsertMaintenanceResolver,
        aggregateMaintenance: actionResolvers.AggregateMaintenanceResolver,
        groupByMaintenance: actionResolvers.GroupByMaintenanceResolver
    },
    Account: {
        account: actionResolvers.FindUniqueAccountResolver,
        findFirstAccount: actionResolvers.FindFirstAccountResolver,
        accounts: actionResolvers.FindManyAccountResolver,
        createAccount: actionResolvers.CreateAccountResolver,
        createManyAccount: actionResolvers.CreateManyAccountResolver,
        deleteAccount: actionResolvers.DeleteAccountResolver,
        updateAccount: actionResolvers.UpdateAccountResolver,
        deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
        updateManyAccount: actionResolvers.UpdateManyAccountResolver,
        upsertAccount: actionResolvers.UpsertAccountResolver,
        aggregateAccount: actionResolvers.AggregateAccountResolver,
        groupByAccount: actionResolvers.GroupByAccountResolver
    },
    Session: {
        session: actionResolvers.FindUniqueSessionResolver,
        findFirstSession: actionResolvers.FindFirstSessionResolver,
        sessions: actionResolvers.FindManySessionResolver,
        createSession: actionResolvers.CreateSessionResolver,
        createManySession: actionResolvers.CreateManySessionResolver,
        deleteSession: actionResolvers.DeleteSessionResolver,
        updateSession: actionResolvers.UpdateSessionResolver,
        deleteManySession: actionResolvers.DeleteManySessionResolver,
        updateManySession: actionResolvers.UpdateManySessionResolver,
        upsertSession: actionResolvers.UpsertSessionResolver,
        aggregateSession: actionResolvers.AggregateSessionResolver,
        groupBySession: actionResolvers.GroupBySessionResolver
    },
    VerificationToken: {
        verificationToken: actionResolvers.FindUniqueVerificationTokenResolver,
        findFirstVerificationToken: actionResolvers.FindFirstVerificationTokenResolver,
        verificationTokens: actionResolvers.FindManyVerificationTokenResolver,
        createVerificationToken: actionResolvers.CreateVerificationTokenResolver,
        createManyVerificationToken: actionResolvers.CreateManyVerificationTokenResolver,
        deleteVerificationToken: actionResolvers.DeleteVerificationTokenResolver,
        updateVerificationToken: actionResolvers.UpdateVerificationTokenResolver,
        deleteManyVerificationToken: actionResolvers.DeleteManyVerificationTokenResolver,
        updateManyVerificationToken: actionResolvers.UpdateManyVerificationTokenResolver,
        upsertVerificationToken: actionResolvers.UpsertVerificationTokenResolver,
        aggregateVerificationToken: actionResolvers.AggregateVerificationTokenResolver,
        groupByVerificationToken: actionResolvers.GroupByVerificationTokenResolver
    },
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    }
};
const crudResolversInfo = {
    Product: ["product", "findFirstProduct", "products", "createProduct", "createManyProduct", "deleteProduct", "updateProduct", "deleteManyProduct", "updateManyProduct", "upsertProduct", "aggregateProduct", "groupByProduct"],
    Product_Type: ["product_Type", "findFirstProduct_Type", "product_Types", "createProduct_Type", "createManyProduct_Type", "deleteProduct_Type", "updateProduct_Type", "deleteManyProduct_Type", "updateManyProduct_Type", "upsertProduct_Type", "aggregateProduct_Type", "groupByProduct_Type"],
    State: ["state", "findFirstState", "states", "createState", "createManyState", "deleteState", "updateState", "deleteManyState", "updateManyState", "upsertState", "aggregateState", "groupByState"],
    Computer: ["computer", "findFirstComputer", "computers", "createComputer", "createManyComputer", "deleteComputer", "updateComputer", "deleteManyComputer", "updateManyComputer", "upsertComputer", "aggregateComputer", "groupByComputer"],
    SoftwareComputer: ["softwareComputer", "findFirstSoftwareComputer", "softwareComputers", "createSoftwareComputer", "createManySoftwareComputer", "deleteSoftwareComputer", "updateSoftwareComputer", "deleteManySoftwareComputer", "updateManySoftwareComputer", "upsertSoftwareComputer", "aggregateSoftwareComputer", "groupBySoftwareComputer"],
    Program: ["program", "findFirstProgram", "programs", "createProgram", "createManyProgram", "deleteProgram", "updateProgram", "deleteManyProgram", "updateManyProgram", "upsertProgram", "aggregateProgram", "groupByProgram"],
    PartComputer: ["partComputer", "findFirstPartComputer", "partComputers", "createPartComputer", "createManyPartComputer", "deletePartComputer", "updatePartComputer", "deleteManyPartComputer", "updateManyPartComputer", "upsertPartComputer", "aggregatePartComputer", "groupByPartComputer"],
    Location: ["location", "findFirstLocation", "locations", "createLocation", "createManyLocation", "deleteLocation", "updateLocation", "deleteManyLocation", "updateManyLocation", "upsertLocation", "aggregateLocation", "groupByLocation"],
    Maintenance: ["maintenance", "findFirstMaintenance", "maintenances", "createMaintenance", "createManyMaintenance", "deleteMaintenance", "updateMaintenance", "deleteManyMaintenance", "updateManyMaintenance", "upsertMaintenance", "aggregateMaintenance", "groupByMaintenance"],
    Account: ["account", "findFirstAccount", "accounts", "createAccount", "createManyAccount", "deleteAccount", "updateAccount", "deleteManyAccount", "updateManyAccount", "upsertAccount", "aggregateAccount", "groupByAccount"],
    Session: ["session", "findFirstSession", "sessions", "createSession", "createManySession", "deleteSession", "updateSession", "deleteManySession", "updateManySession", "upsertSession", "aggregateSession", "groupBySession"],
    VerificationToken: ["verificationToken", "findFirstVerificationToken", "verificationTokens", "createVerificationToken", "createManyVerificationToken", "deleteVerificationToken", "updateVerificationToken", "deleteManyVerificationToken", "updateManyVerificationToken", "upsertVerificationToken", "aggregateVerificationToken", "groupByVerificationToken"],
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"]
};
const argsInfo = {
    FindUniqueProductArgs: ["where"],
    FindFirstProductArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyProductArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateProductArgs: ["data"],
    CreateManyProductArgs: ["data", "skipDuplicates"],
    DeleteProductArgs: ["where"],
    UpdateProductArgs: ["data", "where"],
    DeleteManyProductArgs: ["where"],
    UpdateManyProductArgs: ["data", "where"],
    UpsertProductArgs: ["where", "create", "update"],
    AggregateProductArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByProductArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueProduct_TypeArgs: ["where"],
    FindFirstProduct_TypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyProduct_TypeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateProduct_TypeArgs: ["data"],
    CreateManyProduct_TypeArgs: ["data", "skipDuplicates"],
    DeleteProduct_TypeArgs: ["where"],
    UpdateProduct_TypeArgs: ["data", "where"],
    DeleteManyProduct_TypeArgs: ["where"],
    UpdateManyProduct_TypeArgs: ["data", "where"],
    UpsertProduct_TypeArgs: ["where", "create", "update"],
    AggregateProduct_TypeArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByProduct_TypeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueStateArgs: ["where"],
    FindFirstStateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyStateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateStateArgs: ["data"],
    CreateManyStateArgs: ["data", "skipDuplicates"],
    DeleteStateArgs: ["where"],
    UpdateStateArgs: ["data", "where"],
    DeleteManyStateArgs: ["where"],
    UpdateManyStateArgs: ["data", "where"],
    UpsertStateArgs: ["where", "create", "update"],
    AggregateStateArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByStateArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueComputerArgs: ["where"],
    FindFirstComputerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyComputerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateComputerArgs: ["data"],
    CreateManyComputerArgs: ["data", "skipDuplicates"],
    DeleteComputerArgs: ["where"],
    UpdateComputerArgs: ["data", "where"],
    DeleteManyComputerArgs: ["where"],
    UpdateManyComputerArgs: ["data", "where"],
    UpsertComputerArgs: ["where", "create", "update"],
    AggregateComputerArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByComputerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSoftwareComputerArgs: ["where"],
    FindFirstSoftwareComputerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySoftwareComputerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSoftwareComputerArgs: ["data"],
    CreateManySoftwareComputerArgs: ["data", "skipDuplicates"],
    DeleteSoftwareComputerArgs: ["where"],
    UpdateSoftwareComputerArgs: ["data", "where"],
    DeleteManySoftwareComputerArgs: ["where"],
    UpdateManySoftwareComputerArgs: ["data", "where"],
    UpsertSoftwareComputerArgs: ["where", "create", "update"],
    AggregateSoftwareComputerArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySoftwareComputerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueProgramArgs: ["where"],
    FindFirstProgramArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyProgramArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateProgramArgs: ["data"],
    CreateManyProgramArgs: ["data", "skipDuplicates"],
    DeleteProgramArgs: ["where"],
    UpdateProgramArgs: ["data", "where"],
    DeleteManyProgramArgs: ["where"],
    UpdateManyProgramArgs: ["data", "where"],
    UpsertProgramArgs: ["where", "create", "update"],
    AggregateProgramArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByProgramArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePartComputerArgs: ["where"],
    FindFirstPartComputerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPartComputerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePartComputerArgs: ["data"],
    CreateManyPartComputerArgs: ["data", "skipDuplicates"],
    DeletePartComputerArgs: ["where"],
    UpdatePartComputerArgs: ["data", "where"],
    DeleteManyPartComputerArgs: ["where"],
    UpdateManyPartComputerArgs: ["data", "where"],
    UpsertPartComputerArgs: ["where", "create", "update"],
    AggregatePartComputerArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPartComputerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLocationArgs: ["where"],
    FindFirstLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLocationArgs: ["data"],
    CreateManyLocationArgs: ["data", "skipDuplicates"],
    DeleteLocationArgs: ["where"],
    UpdateLocationArgs: ["data", "where"],
    DeleteManyLocationArgs: ["where"],
    UpdateManyLocationArgs: ["data", "where"],
    UpsertLocationArgs: ["where", "create", "update"],
    AggregateLocationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLocationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMaintenanceArgs: ["where"],
    FindFirstMaintenanceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMaintenanceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMaintenanceArgs: ["data"],
    CreateManyMaintenanceArgs: ["data", "skipDuplicates"],
    DeleteMaintenanceArgs: ["where"],
    UpdateMaintenanceArgs: ["data", "where"],
    DeleteManyMaintenanceArgs: ["where"],
    UpdateManyMaintenanceArgs: ["data", "where"],
    UpsertMaintenanceArgs: ["where", "create", "update"],
    AggregateMaintenanceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMaintenanceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAccountArgs: ["where"],
    FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAccountArgs: ["data"],
    CreateManyAccountArgs: ["data", "skipDuplicates"],
    DeleteAccountArgs: ["where"],
    UpdateAccountArgs: ["data", "where"],
    DeleteManyAccountArgs: ["where"],
    UpdateManyAccountArgs: ["data", "where"],
    UpsertAccountArgs: ["where", "create", "update"],
    AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSessionArgs: ["where"],
    FindFirstSessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSessionArgs: ["data"],
    CreateManySessionArgs: ["data", "skipDuplicates"],
    DeleteSessionArgs: ["where"],
    UpdateSessionArgs: ["data", "where"],
    DeleteManySessionArgs: ["where"],
    UpdateManySessionArgs: ["data", "where"],
    UpsertSessionArgs: ["where", "create", "update"],
    AggregateSessionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySessionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueVerificationTokenArgs: ["where"],
    FindFirstVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateVerificationTokenArgs: ["data"],
    CreateManyVerificationTokenArgs: ["data", "skipDuplicates"],
    DeleteVerificationTokenArgs: ["where"],
    UpdateVerificationTokenArgs: ["data", "where"],
    DeleteManyVerificationTokenArgs: ["where"],
    UpdateManyVerificationTokenArgs: ["data", "where"],
    UpsertVerificationTokenArgs: ["where", "create", "update"],
    AggregateVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByVerificationTokenArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Product: relationResolvers.ProductRelationsResolver,
    Product_Type: relationResolvers.Product_TypeRelationsResolver,
    State: relationResolvers.StateRelationsResolver,
    Computer: relationResolvers.ComputerRelationsResolver,
    SoftwareComputer: relationResolvers.SoftwareComputerRelationsResolver,
    Program: relationResolvers.ProgramRelationsResolver,
    PartComputer: relationResolvers.PartComputerRelationsResolver,
    Location: relationResolvers.LocationRelationsResolver,
    Maintenance: relationResolvers.MaintenanceRelationsResolver,
    Account: relationResolvers.AccountRelationsResolver,
    Session: relationResolvers.SessionRelationsResolver,
    User: relationResolvers.UserRelationsResolver
};
const relationResolversInfo = {
    Product: ["product_type", "state", "partcomputer"],
    Product_Type: ["product"],
    State: ["product", "computer"],
    Computer: ["state", "softwarecomputer", "partComputer"],
    SoftwareComputer: ["computer", "program"],
    Program: ["softwarecomputer"],
    PartComputer: ["product", "computer", "location", "maintenance"],
    Location: ["partComputer"],
    Maintenance: ["user", "partComputer"],
    Account: ["user"],
    Session: ["user"],
    User: ["accounts", "sessions", "mantenance"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Product: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    Product_Type: ["id_product_type", "description"],
    State: ["id_state", "description"],
    Computer: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    SoftwareComputer: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    Program: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    PartComputer: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    Location: ["id_location", "city", "job_name"],
    Maintenance: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    Account: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    Session: ["id", "sessionToken", "userId", "expires"],
    VerificationToken: ["identifier", "token", "expires"],
    User: ["id", "name", "email", "emailVerified", "image"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateProduct: ["_count", "_avg", "_sum", "_min", "_max"],
    ProductGroupBy: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateProduct_Type: ["_count", "_avg", "_sum", "_min", "_max"],
    Product_TypeGroupBy: ["id_product_type", "description", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateState: ["_count", "_avg", "_sum", "_min", "_max"],
    StateGroupBy: ["id_state", "description", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateComputer: ["_count", "_avg", "_sum", "_min", "_max"],
    ComputerGroupBy: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSoftwareComputer: ["_count", "_avg", "_sum", "_min", "_max"],
    SoftwareComputerGroupBy: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateProgram: ["_count", "_avg", "_sum", "_min", "_max"],
    ProgramGroupBy: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregatePartComputer: ["_count", "_avg", "_sum", "_min", "_max"],
    PartComputerGroupBy: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLocation: ["_count", "_avg", "_sum", "_min", "_max"],
    LocationGroupBy: ["id_location", "city", "job_name", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateMaintenance: ["_count", "_avg", "_sum", "_min", "_max"],
    MaintenanceGroupBy: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
    AccountGroupBy: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSession: ["_count", "_min", "_max"],
    SessionGroupBy: ["id", "sessionToken", "userId", "expires", "_count", "_min", "_max"],
    AggregateVerificationToken: ["_count", "_min", "_max"],
    VerificationTokenGroupBy: ["identifier", "token", "expires", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "name", "email", "emailVerified", "image", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    ProductCountAggregate: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial", "_all"],
    ProductAvgAggregate: ["id_product", "product_typeId", "stateId"],
    ProductSumAggregate: ["id_product", "product_typeId", "stateId"],
    ProductMinAggregate: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductMaxAggregate: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    Product_TypeCount: ["product"],
    Product_TypeCountAggregate: ["id_product_type", "description", "_all"],
    Product_TypeAvgAggregate: ["id_product_type"],
    Product_TypeSumAggregate: ["id_product_type"],
    Product_TypeMinAggregate: ["id_product_type", "description"],
    Product_TypeMaxAggregate: ["id_product_type", "description"],
    StateCount: ["product", "computer"],
    StateCountAggregate: ["id_state", "description", "_all"],
    StateAvgAggregate: ["id_state"],
    StateSumAggregate: ["id_state"],
    StateMinAggregate: ["id_state", "description"],
    StateMaxAggregate: ["id_state", "description"],
    ComputerCount: ["partComputer"],
    ComputerCountAggregate: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial", "_all"],
    ComputerAvgAggregate: ["id_computer", "price", "stateId", "softwarecomputerId"],
    ComputerSumAggregate: ["id_computer", "price", "stateId", "softwarecomputerId"],
    ComputerMinAggregate: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    ComputerMaxAggregate: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    SoftwareComputerCount: ["computer", "program"],
    SoftwareComputerCountAggregate: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "_all"],
    SoftwareComputerAvgAggregate: ["id_softwarecomputer"],
    SoftwareComputerSumAggregate: ["id_softwarecomputer"],
    SoftwareComputerMinAggregate: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    SoftwareComputerMaxAggregate: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    ProgramCountAggregate: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId", "_all"],
    ProgramAvgAggregate: ["id_program", "softwarecomputerId"],
    ProgramSumAggregate: ["id_program", "softwarecomputerId"],
    ProgramMinAggregate: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    ProgramMaxAggregate: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    PartComputerCountAggregate: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part", "_all"],
    PartComputerAvgAggregate: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId"],
    PartComputerSumAggregate: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId"],
    PartComputerMinAggregate: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    PartComputerMaxAggregate: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    LocationCount: ["partComputer"],
    LocationCountAggregate: ["id_location", "city", "job_name", "_all"],
    LocationAvgAggregate: ["id_location"],
    LocationSumAggregate: ["id_location"],
    LocationMinAggregate: ["id_location", "city", "job_name"],
    LocationMaxAggregate: ["id_location", "city", "job_name"],
    MaintenanceCount: ["partComputer"],
    MaintenanceCountAggregate: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId", "_all"],
    MaintenanceAvgAggregate: ["id_maintenance"],
    MaintenanceSumAggregate: ["id_maintenance"],
    MaintenanceMinAggregate: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    MaintenanceMaxAggregate: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    AccountCountAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_all"],
    AccountAvgAggregate: ["expires_at"],
    AccountSumAggregate: ["expires_at"],
    AccountMinAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountMaxAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionCountAggregate: ["id", "sessionToken", "userId", "expires", "_all"],
    SessionMinAggregate: ["id", "sessionToken", "userId", "expires"],
    SessionMaxAggregate: ["id", "sessionToken", "userId", "expires"],
    VerificationTokenCountAggregate: ["identifier", "token", "expires", "_all"],
    VerificationTokenMinAggregate: ["identifier", "token", "expires"],
    VerificationTokenMaxAggregate: ["identifier", "token", "expires"],
    UserCount: ["accounts", "sessions", "mantenance"],
    UserCountAggregate: ["id", "name", "email", "emailVerified", "image", "_all"],
    UserMinAggregate: ["id", "name", "email", "emailVerified", "image"],
    UserMaxAggregate: ["id", "name", "email", "emailVerified", "image"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    ProductWhereInput: ["AND", "OR", "NOT", "id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "product_typeId", "size", "tecnology", "conectivity", "state", "stateId", "partcomputer", "historial"],
    ProductOrderByWithRelationInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "product_typeId", "size", "tecnology", "conectivity", "state", "stateId", "partcomputer", "historial"],
    ProductWhereUniqueInput: ["id_product", "internal_code", "product_typeId", "stateId"],
    ProductOrderByWithAggregationInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial", "_count", "_avg", "_max", "_min", "_sum"],
    ProductScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    Product_TypeWhereInput: ["AND", "OR", "NOT", "id_product_type", "product", "description"],
    Product_TypeOrderByWithRelationInput: ["id_product_type", "product", "description"],
    Product_TypeWhereUniqueInput: ["id_product_type"],
    Product_TypeOrderByWithAggregationInput: ["id_product_type", "description", "_count", "_avg", "_max", "_min", "_sum"],
    Product_TypeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_product_type", "description"],
    StateWhereInput: ["AND", "OR", "NOT", "id_state", "description", "product", "computer"],
    StateOrderByWithRelationInput: ["id_state", "description", "product", "computer"],
    StateWhereUniqueInput: ["id_state"],
    StateOrderByWithAggregationInput: ["id_state", "description", "_count", "_avg", "_max", "_min", "_sum"],
    StateScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_state", "description"],
    ComputerWhereInput: ["AND", "OR", "NOT", "id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "stateId", "softwarecomputer", "softwarecomputerId", "partComputer", "observation", "historial"],
    ComputerOrderByWithRelationInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "stateId", "softwarecomputer", "softwarecomputerId", "partComputer", "observation", "historial"],
    ComputerWhereUniqueInput: ["id_computer", "stateId", "softwarecomputerId"],
    ComputerOrderByWithAggregationInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial", "_count", "_avg", "_max", "_min", "_sum"],
    ComputerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    SoftwareComputerWhereInput: ["AND", "OR", "NOT", "id_softwarecomputer", "computer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "program"],
    SoftwareComputerOrderByWithRelationInput: ["id_softwarecomputer", "computer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "program"],
    SoftwareComputerWhereUniqueInput: ["id_softwarecomputer"],
    SoftwareComputerOrderByWithAggregationInput: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "_count", "_avg", "_max", "_min", "_sum"],
    SoftwareComputerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    ProgramWhereInput: ["AND", "OR", "NOT", "id_program", "name_program", "version_program", "license_program", "softwarecomputer", "softwarecomputerId"],
    ProgramOrderByWithRelationInput: ["id_program", "name_program", "version_program", "license_program", "softwarecomputer", "softwarecomputerId"],
    ProgramWhereUniqueInput: ["id_program", "softwarecomputerId"],
    ProgramOrderByWithAggregationInput: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId", "_count", "_avg", "_max", "_min", "_sum"],
    ProgramScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    PartComputerWhereInput: ["AND", "OR", "NOT", "id_partComputer", "product", "productId", "computer", "computerId", "location", "locationId", "maintenance", "maintenanceId", "name_part"],
    PartComputerOrderByWithRelationInput: ["id_partComputer", "product", "productId", "computer", "computerId", "location", "locationId", "maintenance", "maintenanceId", "name_part"],
    PartComputerWhereUniqueInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId"],
    PartComputerOrderByWithAggregationInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part", "_count", "_avg", "_max", "_min", "_sum"],
    PartComputerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    LocationWhereInput: ["AND", "OR", "NOT", "id_location", "city", "job_name", "partComputer"],
    LocationOrderByWithRelationInput: ["id_location", "city", "job_name", "partComputer"],
    LocationWhereUniqueInput: ["id_location"],
    LocationOrderByWithAggregationInput: ["id_location", "city", "job_name", "_count", "_avg", "_max", "_min", "_sum"],
    LocationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_location", "city", "job_name"],
    MaintenanceWhereInput: ["AND", "OR", "NOT", "id_maintenance", "date_maintenance", "jworkerNameFirm", "user", "userId", "partComputer"],
    MaintenanceOrderByWithRelationInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "user", "userId", "partComputer"],
    MaintenanceWhereUniqueInput: ["id_maintenance", "userId"],
    MaintenanceOrderByWithAggregationInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    MaintenanceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    AccountWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountOrderByWithRelationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountWhereUniqueInput: ["id", "provider_providerAccountId"],
    AccountOrderByWithAggregationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_count", "_avg", "_max", "_min", "_sum"],
    AccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires", "user"],
    SessionOrderByWithRelationInput: ["id", "sessionToken", "userId", "expires", "user"],
    SessionWhereUniqueInput: ["id", "sessionToken"],
    SessionOrderByWithAggregationInput: ["id", "sessionToken", "userId", "expires", "_count", "_max", "_min"],
    SessionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    VerificationTokenWhereInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    VerificationTokenOrderByWithRelationInput: ["identifier", "token", "expires"],
    VerificationTokenWhereUniqueInput: ["token", "identifier_token"],
    VerificationTokenOrderByWithAggregationInput: ["identifier", "token", "expires", "_count", "_max", "_min"],
    VerificationTokenScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "image", "accounts", "sessions", "mantenance"],
    UserOrderByWithRelationInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "mantenance"],
    UserWhereUniqueInput: ["id", "email"],
    UserOrderByWithAggregationInput: ["id", "name", "email", "emailVerified", "image", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "image"],
    ProductCreateInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "size", "tecnology", "conectivity", "state", "partcomputer", "historial"],
    ProductUpdateInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "size", "tecnology", "conectivity", "state", "partcomputer", "historial"],
    ProductCreateManyInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductUpdateManyMutationInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "size", "tecnology", "conectivity", "historial"],
    Product_TypeCreateInput: ["product", "description"],
    Product_TypeUpdateInput: ["product", "description"],
    Product_TypeCreateManyInput: ["id_product_type", "description"],
    Product_TypeUpdateManyMutationInput: ["description"],
    StateCreateInput: ["description", "product", "computer"],
    StateUpdateInput: ["description", "product", "computer"],
    StateCreateManyInput: ["id_state", "description"],
    StateUpdateManyMutationInput: ["description"],
    ComputerCreateInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "softwarecomputer", "partComputer", "observation", "historial"],
    ComputerUpdateInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "softwarecomputer", "partComputer", "observation", "historial"],
    ComputerCreateManyInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    ComputerUpdateManyMutationInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "observation", "historial"],
    SoftwareComputerCreateInput: ["computer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "program"],
    SoftwareComputerUpdateInput: ["computer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "program"],
    SoftwareComputerCreateManyInput: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    SoftwareComputerUpdateManyMutationInput: ["operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    ProgramCreateInput: ["name_program", "version_program", "license_program", "softwarecomputer"],
    ProgramUpdateInput: ["name_program", "version_program", "license_program", "softwarecomputer"],
    ProgramCreateManyInput: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    ProgramUpdateManyMutationInput: ["name_program", "version_program", "license_program"],
    PartComputerCreateInput: ["product", "computer", "location", "maintenance", "name_part"],
    PartComputerUpdateInput: ["product", "computer", "location", "maintenance", "name_part"],
    PartComputerCreateManyInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    PartComputerUpdateManyMutationInput: ["name_part"],
    LocationCreateInput: ["city", "job_name", "partComputer"],
    LocationUpdateInput: ["city", "job_name", "partComputer"],
    LocationCreateManyInput: ["id_location", "city", "job_name"],
    LocationUpdateManyMutationInput: ["city", "job_name"],
    MaintenanceCreateInput: ["date_maintenance", "jworkerNameFirm", "user", "partComputer"],
    MaintenanceUpdateInput: ["date_maintenance", "jworkerNameFirm", "user", "partComputer"],
    MaintenanceCreateManyInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    MaintenanceUpdateManyMutationInput: ["date_maintenance", "jworkerNameFirm"],
    AccountCreateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountUpdateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountCreateManyInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountUpdateManyMutationInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionCreateInput: ["id", "sessionToken", "expires", "user"],
    SessionUpdateInput: ["id", "sessionToken", "expires", "user"],
    SessionCreateManyInput: ["id", "sessionToken", "userId", "expires"],
    SessionUpdateManyMutationInput: ["id", "sessionToken", "expires"],
    VerificationTokenCreateInput: ["identifier", "token", "expires"],
    VerificationTokenUpdateInput: ["identifier", "token", "expires"],
    VerificationTokenCreateManyInput: ["identifier", "token", "expires"],
    VerificationTokenUpdateManyMutationInput: ["identifier", "token", "expires"],
    UserCreateInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "mantenance"],
    UserUpdateInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "mantenance"],
    UserCreateManyInput: ["id", "name", "email", "emailVerified", "image"],
    UserUpdateManyMutationInput: ["id", "name", "email", "emailVerified", "image"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    Product_TypeRelationFilter: ["is", "isNot"],
    StateRelationFilter: ["is", "isNot"],
    PartComputerRelationFilter: ["is", "isNot"],
    ProductCountOrderByAggregateInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductAvgOrderByAggregateInput: ["id_product", "product_typeId", "stateId"],
    ProductMaxOrderByAggregateInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductMinOrderByAggregateInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductSumOrderByAggregateInput: ["id_product", "product_typeId", "stateId"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    ProductListRelationFilter: ["every", "some", "none"],
    ProductOrderByRelationAggregateInput: ["_count"],
    Product_TypeCountOrderByAggregateInput: ["id_product_type", "description"],
    Product_TypeAvgOrderByAggregateInput: ["id_product_type"],
    Product_TypeMaxOrderByAggregateInput: ["id_product_type", "description"],
    Product_TypeMinOrderByAggregateInput: ["id_product_type", "description"],
    Product_TypeSumOrderByAggregateInput: ["id_product_type"],
    ComputerListRelationFilter: ["every", "some", "none"],
    ComputerOrderByRelationAggregateInput: ["_count"],
    StateCountOrderByAggregateInput: ["id_state", "description"],
    StateAvgOrderByAggregateInput: ["id_state"],
    StateMaxOrderByAggregateInput: ["id_state", "description"],
    StateMinOrderByAggregateInput: ["id_state", "description"],
    StateSumOrderByAggregateInput: ["id_state"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    BoolNullableFilter: ["equals", "not"],
    SoftwareComputerRelationFilter: ["is", "isNot"],
    PartComputerListRelationFilter: ["every", "some", "none"],
    PartComputerOrderByRelationAggregateInput: ["_count"],
    ComputerCountOrderByAggregateInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    ComputerAvgOrderByAggregateInput: ["id_computer", "price", "stateId", "softwarecomputerId"],
    ComputerMaxOrderByAggregateInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    ComputerMinOrderByAggregateInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    ComputerSumOrderByAggregateInput: ["id_computer", "price", "stateId", "softwarecomputerId"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    EnumEnum_OperatigsystemFilter: ["equals", "in", "notIn", "not"],
    EnumEnum_ArchitectureFilter: ["equals", "in", "notIn", "not"],
    ProgramListRelationFilter: ["every", "some", "none"],
    ProgramOrderByRelationAggregateInput: ["_count"],
    SoftwareComputerCountOrderByAggregateInput: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    SoftwareComputerAvgOrderByAggregateInput: ["id_softwarecomputer"],
    SoftwareComputerMaxOrderByAggregateInput: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    SoftwareComputerMinOrderByAggregateInput: ["id_softwarecomputer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    SoftwareComputerSumOrderByAggregateInput: ["id_softwarecomputer"],
    EnumEnum_OperatigsystemWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumEnum_ArchitectureWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    ProgramCountOrderByAggregateInput: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    ProgramAvgOrderByAggregateInput: ["id_program", "softwarecomputerId"],
    ProgramMaxOrderByAggregateInput: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    ProgramMinOrderByAggregateInput: ["id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    ProgramSumOrderByAggregateInput: ["id_program", "softwarecomputerId"],
    ProductRelationFilter: ["is", "isNot"],
    ComputerRelationFilter: ["is", "isNot"],
    LocationRelationFilter: ["is", "isNot"],
    MaintenanceRelationFilter: ["is", "isNot"],
    PartComputerCountOrderByAggregateInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    PartComputerAvgOrderByAggregateInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId"],
    PartComputerMaxOrderByAggregateInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    PartComputerMinOrderByAggregateInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    PartComputerSumOrderByAggregateInput: ["id_partComputer", "productId", "computerId", "locationId", "maintenanceId"],
    LocationCountOrderByAggregateInput: ["id_location", "city", "job_name"],
    LocationAvgOrderByAggregateInput: ["id_location"],
    LocationMaxOrderByAggregateInput: ["id_location", "city", "job_name"],
    LocationMinOrderByAggregateInput: ["id_location", "city", "job_name"],
    LocationSumOrderByAggregateInput: ["id_location"],
    UserRelationFilter: ["is", "isNot"],
    MaintenanceCountOrderByAggregateInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    MaintenanceAvgOrderByAggregateInput: ["id_maintenance"],
    MaintenanceMaxOrderByAggregateInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    MaintenanceMinOrderByAggregateInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    MaintenanceSumOrderByAggregateInput: ["id_maintenance"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    AccountProviderProviderAccountIdCompoundUniqueInput: ["provider", "providerAccountId"],
    AccountCountOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountAvgOrderByAggregateInput: ["expires_at"],
    AccountMaxOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountMinOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountSumOrderByAggregateInput: ["expires_at"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    SessionCountOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMaxOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMinOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    VerificationTokenIdentifierTokenCompoundUniqueInput: ["identifier", "token"],
    VerificationTokenCountOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationTokenMaxOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationTokenMinOrderByAggregateInput: ["identifier", "token", "expires"],
    AccountListRelationFilter: ["every", "some", "none"],
    SessionListRelationFilter: ["every", "some", "none"],
    MaintenanceListRelationFilter: ["every", "some", "none"],
    AccountOrderByRelationAggregateInput: ["_count"],
    SessionOrderByRelationAggregateInput: ["_count"],
    MaintenanceOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "name", "email", "emailVerified", "image"],
    UserMaxOrderByAggregateInput: ["id", "name", "email", "emailVerified", "image"],
    UserMinOrderByAggregateInput: ["id", "name", "email", "emailVerified", "image"],
    Product_TypeCreateNestedOneWithoutProductInput: ["create", "connectOrCreate", "connect"],
    StateCreateNestedOneWithoutProductInput: ["create", "connectOrCreate", "connect"],
    PartComputerCreateNestedOneWithoutProductInput: ["create", "connectOrCreate", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    Product_TypeUpdateOneRequiredWithoutProductInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    StateUpdateOneRequiredWithoutProductInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PartComputerUpdateOneWithoutProductInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    ProductCreateNestedManyWithoutProduct_typeInput: ["create", "connectOrCreate", "createMany", "connect"],
    ProductUpdateManyWithoutProduct_typeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ProductCreateNestedManyWithoutStateInput: ["create", "connectOrCreate", "createMany", "connect"],
    ComputerCreateNestedManyWithoutStateInput: ["create", "connectOrCreate", "createMany", "connect"],
    ProductUpdateManyWithoutStateInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ComputerUpdateManyWithoutStateInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    StateCreateNestedOneWithoutComputerInput: ["create", "connectOrCreate", "connect"],
    SoftwareComputerCreateNestedOneWithoutComputerInput: ["create", "connectOrCreate", "connect"],
    PartComputerCreateNestedManyWithoutComputerInput: ["create", "connectOrCreate", "createMany", "connect"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    NullableBoolFieldUpdateOperationsInput: ["set"],
    StateUpdateOneRequiredWithoutComputerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    SoftwareComputerUpdateOneRequiredWithoutComputerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PartComputerUpdateManyWithoutComputerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ComputerCreateNestedManyWithoutSoftwarecomputerInput: ["create", "connectOrCreate", "createMany", "connect"],
    ProgramCreateNestedManyWithoutSoftwarecomputerInput: ["create", "connectOrCreate", "createMany", "connect"],
    ComputerUpdateManyWithoutSoftwarecomputerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    EnumEnum_OperatigsystemFieldUpdateOperationsInput: ["set"],
    EnumEnum_ArchitectureFieldUpdateOperationsInput: ["set"],
    ProgramUpdateManyWithoutSoftwarecomputerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SoftwareComputerCreateNestedOneWithoutProgramInput: ["create", "connectOrCreate", "connect"],
    SoftwareComputerUpdateOneRequiredWithoutProgramInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ProductCreateNestedOneWithoutPartcomputerInput: ["create", "connectOrCreate", "connect"],
    ComputerCreateNestedOneWithoutPartComputerInput: ["create", "connectOrCreate", "connect"],
    LocationCreateNestedOneWithoutPartComputerInput: ["create", "connectOrCreate", "connect"],
    MaintenanceCreateNestedOneWithoutPartComputerInput: ["create", "connectOrCreate", "connect"],
    ProductUpdateOneRequiredWithoutPartcomputerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ComputerUpdateOneRequiredWithoutPartComputerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    LocationUpdateOneRequiredWithoutPartComputerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MaintenanceUpdateOneRequiredWithoutPartComputerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PartComputerCreateNestedManyWithoutLocationInput: ["create", "connectOrCreate", "createMany", "connect"],
    PartComputerUpdateManyWithoutLocationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutMantenanceInput: ["create", "connectOrCreate", "connect"],
    PartComputerCreateNestedManyWithoutMaintenanceInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateOneRequiredWithoutMantenanceInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PartComputerUpdateManyWithoutMaintenanceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutSessionsInput: ["create", "connectOrCreate", "connect"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    UserUpdateOneRequiredWithoutSessionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    AccountCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    SessionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    MaintenanceCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    AccountUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SessionUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MaintenanceUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedBoolNullableFilter: ["equals", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedEnumEnum_OperatigsystemFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEnum_ArchitectureFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEnum_OperatigsystemWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumEnum_ArchitectureWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    Product_TypeCreateWithoutProductInput: ["description"],
    Product_TypeCreateOrConnectWithoutProductInput: ["where", "create"],
    StateCreateWithoutProductInput: ["description", "computer"],
    StateCreateOrConnectWithoutProductInput: ["where", "create"],
    PartComputerCreateWithoutProductInput: ["computer", "location", "maintenance", "name_part"],
    PartComputerCreateOrConnectWithoutProductInput: ["where", "create"],
    Product_TypeUpsertWithoutProductInput: ["update", "create"],
    Product_TypeUpdateWithoutProductInput: ["description"],
    StateUpsertWithoutProductInput: ["update", "create"],
    StateUpdateWithoutProductInput: ["description", "computer"],
    PartComputerUpsertWithoutProductInput: ["update", "create"],
    PartComputerUpdateWithoutProductInput: ["computer", "location", "maintenance", "name_part"],
    ProductCreateWithoutProduct_typeInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "size", "tecnology", "conectivity", "state", "partcomputer", "historial"],
    ProductCreateOrConnectWithoutProduct_typeInput: ["where", "create"],
    ProductCreateManyProduct_typeInputEnvelope: ["data", "skipDuplicates"],
    ProductUpsertWithWhereUniqueWithoutProduct_typeInput: ["where", "update", "create"],
    ProductUpdateWithWhereUniqueWithoutProduct_typeInput: ["where", "data"],
    ProductUpdateManyWithWhereWithoutProduct_typeInput: ["where", "data"],
    ProductScalarWhereInput: ["AND", "OR", "NOT", "id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductCreateWithoutStateInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "size", "tecnology", "conectivity", "partcomputer", "historial"],
    ProductCreateOrConnectWithoutStateInput: ["where", "create"],
    ProductCreateManyStateInputEnvelope: ["data", "skipDuplicates"],
    ComputerCreateWithoutStateInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "softwarecomputer", "partComputer", "observation", "historial"],
    ComputerCreateOrConnectWithoutStateInput: ["where", "create"],
    ComputerCreateManyStateInputEnvelope: ["data", "skipDuplicates"],
    ProductUpsertWithWhereUniqueWithoutStateInput: ["where", "update", "create"],
    ProductUpdateWithWhereUniqueWithoutStateInput: ["where", "data"],
    ProductUpdateManyWithWhereWithoutStateInput: ["where", "data"],
    ComputerUpsertWithWhereUniqueWithoutStateInput: ["where", "update", "create"],
    ComputerUpdateWithWhereUniqueWithoutStateInput: ["where", "data"],
    ComputerUpdateManyWithWhereWithoutStateInput: ["where", "data"],
    ComputerScalarWhereInput: ["AND", "OR", "NOT", "id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "softwarecomputerId", "observation", "historial"],
    StateCreateWithoutComputerInput: ["description", "product"],
    StateCreateOrConnectWithoutComputerInput: ["where", "create"],
    SoftwareComputerCreateWithoutComputerInput: ["operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "program"],
    SoftwareComputerCreateOrConnectWithoutComputerInput: ["where", "create"],
    PartComputerCreateWithoutComputerInput: ["product", "location", "maintenance", "name_part"],
    PartComputerCreateOrConnectWithoutComputerInput: ["where", "create"],
    PartComputerCreateManyComputerInputEnvelope: ["data", "skipDuplicates"],
    StateUpsertWithoutComputerInput: ["update", "create"],
    StateUpdateWithoutComputerInput: ["description", "product"],
    SoftwareComputerUpsertWithoutComputerInput: ["update", "create"],
    SoftwareComputerUpdateWithoutComputerInput: ["operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture", "program"],
    PartComputerUpsertWithWhereUniqueWithoutComputerInput: ["where", "update", "create"],
    PartComputerUpdateWithWhereUniqueWithoutComputerInput: ["where", "data"],
    PartComputerUpdateManyWithWhereWithoutComputerInput: ["where", "data"],
    PartComputerScalarWhereInput: ["AND", "OR", "NOT", "id_partComputer", "productId", "computerId", "locationId", "maintenanceId", "name_part"],
    ComputerCreateWithoutSoftwarecomputerInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "partComputer", "observation", "historial"],
    ComputerCreateOrConnectWithoutSoftwarecomputerInput: ["where", "create"],
    ComputerCreateManySoftwarecomputerInputEnvelope: ["data", "skipDuplicates"],
    ProgramCreateWithoutSoftwarecomputerInput: ["name_program", "version_program", "license_program"],
    ProgramCreateOrConnectWithoutSoftwarecomputerInput: ["where", "create"],
    ProgramCreateManySoftwarecomputerInputEnvelope: ["data", "skipDuplicates"],
    ComputerUpsertWithWhereUniqueWithoutSoftwarecomputerInput: ["where", "update", "create"],
    ComputerUpdateWithWhereUniqueWithoutSoftwarecomputerInput: ["where", "data"],
    ComputerUpdateManyWithWhereWithoutSoftwarecomputerInput: ["where", "data"],
    ProgramUpsertWithWhereUniqueWithoutSoftwarecomputerInput: ["where", "update", "create"],
    ProgramUpdateWithWhereUniqueWithoutSoftwarecomputerInput: ["where", "data"],
    ProgramUpdateManyWithWhereWithoutSoftwarecomputerInput: ["where", "data"],
    ProgramScalarWhereInput: ["AND", "OR", "NOT", "id_program", "name_program", "version_program", "license_program", "softwarecomputerId"],
    SoftwareComputerCreateWithoutProgramInput: ["computer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    SoftwareComputerCreateOrConnectWithoutProgramInput: ["where", "create"],
    SoftwareComputerUpsertWithoutProgramInput: ["update", "create"],
    SoftwareComputerUpdateWithoutProgramInput: ["computer", "operatingsystem", "license_so", "user_anydesk", "pass_anydesk", "ip", "user_domain", "pass_domain", "user_admin", "pass_admin", "user_local", "pass_local", "architecture"],
    ProductCreateWithoutPartcomputerInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "size", "tecnology", "conectivity", "state", "historial"],
    ProductCreateOrConnectWithoutPartcomputerInput: ["where", "create"],
    ComputerCreateWithoutPartComputerInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "softwarecomputer", "observation", "historial"],
    ComputerCreateOrConnectWithoutPartComputerInput: ["where", "create"],
    LocationCreateWithoutPartComputerInput: ["city", "job_name"],
    LocationCreateOrConnectWithoutPartComputerInput: ["where", "create"],
    MaintenanceCreateWithoutPartComputerInput: ["date_maintenance", "jworkerNameFirm", "user"],
    MaintenanceCreateOrConnectWithoutPartComputerInput: ["where", "create"],
    ProductUpsertWithoutPartcomputerInput: ["update", "create"],
    ProductUpdateWithoutPartcomputerInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "size", "tecnology", "conectivity", "state", "historial"],
    ComputerUpsertWithoutPartComputerInput: ["update", "create"],
    ComputerUpdateWithoutPartComputerInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "softwarecomputer", "observation", "historial"],
    LocationUpsertWithoutPartComputerInput: ["update", "create"],
    LocationUpdateWithoutPartComputerInput: ["city", "job_name"],
    MaintenanceUpsertWithoutPartComputerInput: ["update", "create"],
    MaintenanceUpdateWithoutPartComputerInput: ["date_maintenance", "jworkerNameFirm", "user"],
    PartComputerCreateWithoutLocationInput: ["product", "computer", "maintenance", "name_part"],
    PartComputerCreateOrConnectWithoutLocationInput: ["where", "create"],
    PartComputerCreateManyLocationInputEnvelope: ["data", "skipDuplicates"],
    PartComputerUpsertWithWhereUniqueWithoutLocationInput: ["where", "update", "create"],
    PartComputerUpdateWithWhereUniqueWithoutLocationInput: ["where", "data"],
    PartComputerUpdateManyWithWhereWithoutLocationInput: ["where", "data"],
    UserCreateWithoutMantenanceInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions"],
    UserCreateOrConnectWithoutMantenanceInput: ["where", "create"],
    PartComputerCreateWithoutMaintenanceInput: ["product", "computer", "location", "name_part"],
    PartComputerCreateOrConnectWithoutMaintenanceInput: ["where", "create"],
    PartComputerCreateManyMaintenanceInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutMantenanceInput: ["update", "create"],
    UserUpdateWithoutMantenanceInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions"],
    PartComputerUpsertWithWhereUniqueWithoutMaintenanceInput: ["where", "update", "create"],
    PartComputerUpdateWithWhereUniqueWithoutMaintenanceInput: ["where", "data"],
    PartComputerUpdateManyWithWhereWithoutMaintenanceInput: ["where", "data"],
    UserCreateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "image", "sessions", "mantenance"],
    UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
    UserUpsertWithoutAccountsInput: ["update", "create"],
    UserUpdateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "image", "sessions", "mantenance"],
    UserCreateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "image", "accounts", "mantenance"],
    UserCreateOrConnectWithoutSessionsInput: ["where", "create"],
    UserUpsertWithoutSessionsInput: ["update", "create"],
    UserUpdateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "image", "accounts", "mantenance"],
    AccountCreateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountCreateOrConnectWithoutUserInput: ["where", "create"],
    AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    SessionCreateWithoutUserInput: ["id", "sessionToken", "expires"],
    SessionCreateOrConnectWithoutUserInput: ["where", "create"],
    SessionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    MaintenanceCreateWithoutUserInput: ["date_maintenance", "jworkerNameFirm", "partComputer"],
    MaintenanceCreateOrConnectWithoutUserInput: ["where", "create"],
    MaintenanceCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    AccountScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    SessionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    SessionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    SessionScalarWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    MaintenanceUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    MaintenanceUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    MaintenanceUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    MaintenanceScalarWhereInput: ["AND", "OR", "NOT", "id_maintenance", "date_maintenance", "jworkerNameFirm", "userId"],
    ProductCreateManyProduct_typeInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "size", "tecnology", "conectivity", "stateId", "historial"],
    ProductUpdateWithoutProduct_typeInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "size", "tecnology", "conectivity", "state", "partcomputer", "historial"],
    ProductCreateManyStateInput: ["id_product", "internal_code", "serial_number", "imei", "observation", "picture", "model", "product_typeId", "size", "tecnology", "conectivity", "historial"],
    ComputerCreateManyStateInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "softwarecomputerId", "observation", "historial"],
    ProductUpdateWithoutStateInput: ["internal_code", "serial_number", "imei", "observation", "picture", "model", "product_type", "size", "tecnology", "conectivity", "partcomputer", "historial"],
    ComputerUpdateWithoutStateInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "softwarecomputer", "partComputer", "observation", "historial"],
    PartComputerCreateManyComputerInput: ["id_partComputer", "productId", "locationId", "maintenanceId", "name_part"],
    PartComputerUpdateWithoutComputerInput: ["product", "location", "maintenance", "name_part"],
    ComputerCreateManySoftwarecomputerInput: ["id_computer", "buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "stateId", "observation", "historial"],
    ProgramCreateManySoftwarecomputerInput: ["id_program", "name_program", "version_program", "license_program"],
    ComputerUpdateWithoutSoftwarecomputerInput: ["buy_date", "price", "internal_code", "serial_number", "memory", "hard_disk", "processor", "optical_unit", "model", "state", "partComputer", "observation", "historial"],
    ProgramUpdateWithoutSoftwarecomputerInput: ["name_program", "version_program", "license_program"],
    PartComputerCreateManyLocationInput: ["id_partComputer", "productId", "computerId", "maintenanceId", "name_part"],
    PartComputerUpdateWithoutLocationInput: ["product", "computer", "maintenance", "name_part"],
    PartComputerCreateManyMaintenanceInput: ["id_partComputer", "productId", "computerId", "locationId", "name_part"],
    PartComputerUpdateWithoutMaintenanceInput: ["product", "computer", "location", "name_part"],
    AccountCreateManyUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionCreateManyUserInput: ["id", "sessionToken", "expires"],
    MaintenanceCreateManyUserInput: ["id_maintenance", "date_maintenance", "jworkerNameFirm"],
    AccountUpdateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionUpdateWithoutUserInput: ["id", "sessionToken", "expires"],
    MaintenanceUpdateWithoutUserInput: ["date_maintenance", "jworkerNameFirm", "partComputer"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
